import {
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
  EmbedBuilder,
  ModalBuilder,
  StringSelectMenuBuilder,
  TextInputBuilder,
  TextInputStyle,
} from 'discord.js';
import { INTERACTION_IDS, TICKET_TYPES } from '../../config/constants.js';
import { applyDedosBrand, createDedosAttachment } from '../../utils/branding.js';

export function buildMiddlemanPanel() {
  const embed = applyDedosBrand(
    new EmbedBuilder()
      .setTitle('üõ°Ô∏è Middleman Dedos Shop')
      .setDescription('Selecciona una opci√≥n para conocer el flujo o abrir un middleman seguro.')
  );

  const menu = new StringSelectMenuBuilder()
    .setCustomId(INTERACTION_IDS.MIDDLEMAN_MENU)
    .setPlaceholder('Selecciona una opci√≥n')
    .addOptions(
      { label: 'C√≥mo funciona', value: 'info', emoji: 'üìñ' },
      { label: 'Abrir middleman', value: 'open', emoji: 'üõ†' }
    );

  return {
    embeds: [embed],
    files: [createDedosAttachment()],
    components: [new ActionRowBuilder().addComponents(menu)],
  };
}

export function buildMiddlemanInfo() {
  const embed = applyDedosBrand(
    new EmbedBuilder()
      .setTitle('üìñ ¬øC√≥mo funciona el middleman?')
      .setDescription(
        [
          '1. Completa el formulario para indicar con qui√©n tradear√°s.',
          '2. Ambos usuarios env√≠an sus datos de trade con verificaci√≥n Roblox.',
          '3. Cuando los dos confirman, el canal se bloquea y se avisa al equipo middleman.',
          '4. Usa el bot√≥n de **Pedir ayuda** si necesitas asistencia adicional.',
        ].join('\n')
      )
  );
  return { embeds: [embed], files: [createDedosAttachment()] };
}

export function buildPartnerModal() {
  return new ModalBuilder()
    .setCustomId(INTERACTION_IDS.MIDDLEMAN_MODAL_PARTNER)
    .setTitle('Abrir middleman')
    .addComponents(
      new ActionRowBuilder().addComponents(
        new TextInputBuilder()
          .setCustomId('partner')
          .setLabel('Usuario partner (ID o menci√≥n)')
          .setMinLength(3)
          .setMaxLength(100)
          .setStyle(TextInputStyle.Short)
          .setRequired(true)
      ),
      new ActionRowBuilder().addComponents(
        new TextInputBuilder()
          .setCustomId('context')
          .setLabel('Describe brevemente el trade')
          .setStyle(TextInputStyle.Paragraph)
          .setRequired(true)
      )
    );
}

export function buildTradeModal() {
  return new ModalBuilder()
    .setCustomId(INTERACTION_IDS.MIDDLEMAN_MODAL_TRADE)
    .setTitle('Mis datos de trade')
    .addComponents(
      new ActionRowBuilder().addComponents(
        new TextInputBuilder()
          .setCustomId('roblox_username')
          .setLabel('Usuario de Roblox')
          .setMinLength(3)
          .setMaxLength(50)
          .setStyle(TextInputStyle.Short)
          .setRequired(true)
      ),
      new ActionRowBuilder().addComponents(
        new TextInputBuilder()
          .setCustomId('items')
          .setLabel('¬øQu√© ofreces? Incluye cantidades y moneda')
          .setStyle(TextInputStyle.Paragraph)
          .setMinLength(5)
          .setMaxLength(1000)
          .setRequired(true)
      )
    );
}

export function buildTradePanel({ owner, partner, trades, state }) {
  const ownerTrade = state?.owner?.trade ?? trades.find((t) => String(t.user_id) === String(owner.id));
  const partnerTrade = state?.partner?.trade ?? trades.find((t) => String(t.user_id) === String(partner.id));
  const ownerStatus = ownerTrade
    ? ownerTrade.confirmed
      ? '‚úÖ Confirmado'
      : '‚åõ Pendiente'
    : '‚ùå Sin registrar';
  const partnerStatus = partnerTrade
    ? partnerTrade.confirmed
      ? '‚úÖ Confirmado'
      : '‚åõ Pendiente'
    : '‚ùå Sin registrar';

  const titleSuffix = state?.title ?? 'Seguimiento';
  const baseDescription = 'Completa tus datos y confirma cuando est√©s listo.';
  const descriptionLines = [baseDescription];
  if (state?.summary && state.summary !== baseDescription) {
    descriptionLines.push('', state.summary);
  }

  const embed = applyDedosBrand(
    new EmbedBuilder()
      .setTitle(`üì¶ Panel del trade ‚Äî ${titleSuffix}`)
      .setDescription(descriptionLines.join('\n'))
      .addFields(
        {
          name: `${owner.displayName || owner.user?.username || 'Trader 1'} ‚Äî datos`,
          value: ownerTrade
            ? [
                `‚Ä¢ Roblox: **${ownerTrade.roblox_username}**`,
                `‚Ä¢ Ofrece: ${ownerTrade.items}`,
                `‚Ä¢ Confirmaci√≥n: ${ownerStatus}`,
              ].join('\n')
            : 'Sin datos registrados. Usa **Mis datos de trade**.',
          inline: false,
        },
        {
          name: `${partner.displayName || partner.user?.username || 'Trader 2'} ‚Äî datos`,
          value: partnerTrade
            ? [
                `‚Ä¢ Roblox: **${partnerTrade.roblox_username}**`,
                `‚Ä¢ Ofrece: ${partnerTrade.items}`,
                `‚Ä¢ Confirmaci√≥n: ${partnerStatus}`,
              ].join('\n')
            : 'Sin datos registrados. Usa **Mis datos de trade**.',
          inline: false,
        }
      )
  );

  if (state?.claimStatusLabel) {
    embed.addFields({ name: 'Estado middleman', value: state.claimStatusLabel, inline: false });
  }

  const buttons = new ActionRowBuilder().addComponents(
    new ButtonBuilder()
      .setCustomId(INTERACTION_IDS.MIDDLEMAN_BUTTON_DATA)
      .setLabel('üìù Mis datos de trade')
      .setStyle(ButtonStyle.Primary),
    new ButtonBuilder()
      .setCustomId(INTERACTION_IDS.MIDDLEMAN_BUTTON_CONFIRM)
      .setLabel('‚úÖ Confirmar trade')
      .setStyle(ButtonStyle.Success)
      .setDisabled(!(ownerTrade || partnerTrade)),
    new ButtonBuilder()
      .setCustomId(INTERACTION_IDS.MIDDLEMAN_BUTTON_HELP)
      .setLabel('üö® Pedir ayuda')
      .setStyle(ButtonStyle.Danger)
  );

  return {
    embeds: [embed],
    files: [createDedosAttachment()],
    components: [buttons],
  };
}

export function buildTradeLockedEmbed(mmRole) {
  const embed = applyDedosBrand(
    new EmbedBuilder()
      .setTitle('üîí Trade listo para middleman')
      .setDescription('Ambas partes confirmaron. Espera a que un middleman se una y finalice la transacci√≥n.')
  );
  const content = mmRole ? `<@&${mmRole}> se requiere asistencia en este trade.` : 'Se requiere asistencia del equipo middleman.';
  return { content, embeds: [embed], files: [createDedosAttachment()], components: [] };
}

export function buildRobloxWarningEmbed(username) {
  const embed = applyDedosBrand(
    new EmbedBuilder()
      .setTitle('‚ö†Ô∏è Roblox con poca antig√ºedad')
      .setDescription(`El usuario **${username}** tiene menos de 1 a√±o en Roblox. Procede con precauci√≥n.`)
  );
  return { embeds: [embed], files: [createDedosAttachment()] };
}

export function buildRobloxErrorEmbed(username) {
  const embed = applyDedosBrand(
    new EmbedBuilder()
      .setTitle('‚ùå Usuario de Roblox no encontrado')
      .setDescription(`No pudimos validar al usuario **${username}**. Verifica que est√© escrito correctamente.`)
  );
  return { embeds: [embed], files: [createDedosAttachment()] };
}

export function buildTicketCreatedEmbed({ owner, partner, context }) {
  const embed = applyDedosBrand(
    new EmbedBuilder()
      .setTitle('üé´ Middleman creado')
      .setDescription('Canal listo para continuar el trade con seguridad.')
      .addFields(
        { name: 'Trader', value: owner.toString(), inline: true },
        { name: 'Partner', value: partner.toString(), inline: true },
        { name: 'Contexto', value: context, inline: false }
      )
  );
  return { embeds: [embed], files: [createDedosAttachment()], components: [] };
}

export function buildTicketLimitEmbed(limit) {
  const embed = applyDedosBrand(
    new EmbedBuilder()
      .setTitle('‚õî L√≠mite de tickets')
      .setDescription(`Alcanzaste el l√≠mite de ${limit} middleman abiertos. Cierra uno antes de crear otro.`)
  );
  return { embeds: [embed], files: [createDedosAttachment()], components: [] };
}

export function buildCooldownEmbed(remainingMs) {
  const seconds = Math.ceil(remainingMs / 1000);
  const embed = applyDedosBrand(
    new EmbedBuilder()
      .setTitle('‚åõ Espera un momento')
      .setDescription(`Debes esperar ${seconds} segundos antes de volver a crear un middleman.`)
  );
  return { embeds: [embed], files: [createDedosAttachment()], components: [] };
}

export function buildHelpEmbed(adminRoleId) {
  const embed = applyDedosBrand(
    new EmbedBuilder()
      .setTitle('üö® Ayuda solicitada')
      .setDescription('Se notific√≥ al equipo para revisar este trade. El canal qued√≥ desbloqueado temporalmente.')
  );
  const content = adminRoleId ? `<@&${adminRoleId}> se solicit√≥ apoyo en este middleman.` : 'Se solicit√≥ apoyo en este middleman.';
  return { content, embeds: [embed], files: [createDedosAttachment()] };
}

export function buildTradeUpdateEmbed(title, description) {
  const embed = applyDedosBrand(new EmbedBuilder().setTitle(title).setDescription(description));
  return { embeds: [embed], files: [createDedosAttachment()] };
}

export function buildDisabledPanel({ owner, partner, trades, state }) {
  const base = buildTradePanel({ owner, partner, trades, state });
  const disabledRow = new ActionRowBuilder().addComponents(
    new ButtonBuilder()
      .setCustomId(INTERACTION_IDS.MIDDLEMAN_BUTTON_DATA)
      .setLabel("üìù Mis datos de trade")
      .setStyle(ButtonStyle.Primary)
      .setDisabled(true),
    new ButtonBuilder()
      .setCustomId(INTERACTION_IDS.MIDDLEMAN_BUTTON_CONFIRM)
      .setLabel("‚úÖ Confirmar trade")
      .setStyle(ButtonStyle.Success)
      .setDisabled(true),
    new ButtonBuilder()
      .setCustomId(INTERACTION_IDS.MIDDLEMAN_BUTTON_HELP)
      .setLabel("üö® Pedir ayuda")
      .setStyle(ButtonStyle.Danger)
      .setDisabled(true)
  );
  return { ...base, components: [disabledRow] };
}

export function buildClaimPromptEmbed(mmRoleId) {
  const roleMention = mmRoleId ? `<@&${mmRoleId}>` : 'Middleman';
  const embed = applyDedosBrand(
    new EmbedBuilder()
      .setTitle('üõ°Ô∏è Se requiere middleman')
      .setDescription(
        [
          `${roleMention}, este ticket est√° listo para ser atendido.`,
          'Pulsa el bot√≥n para reclamarlo y atender a los usuarios.',
        ].join('\n')
      )
  );
  return { embeds: [embed], files: [createDedosAttachment()], components: [claimRow()] };
}

export function claimRow() {
  return new ActionRowBuilder().addComponents(
    new ButtonBuilder()
      .setCustomId(INTERACTION_IDS.MIDDLEMAN_BUTTON_CLAIM)
      .setLabel('Reclamar Middleman')
      .setStyle(ButtonStyle.Success)
      .setEmoji('üõ°Ô∏è')
  );
}

export function buildReviewPromptForMiddleman(mmTag) {
  const embed = applyDedosBrand(
    new EmbedBuilder()
      .setTitle('üìù Solicitar rese√±as')
      .setDescription(
        [
          `${mmTag}, cuando finalices el trade usa el bot√≥n para solicitar rese√±as a los traders.`,
          'Esto enviar√° un mensaje para que califiquen tu servicio.',
        ].join('\n')
      )
  );
  return { embeds: [embed], files: [createDedosAttachment()], components: [requestReviewRow()] };
}

export function requestReviewRow() {
  return new ActionRowBuilder().addComponents(
    new ButtonBuilder()
      .setCustomId(INTERACTION_IDS.MIDDLEMAN_BUTTON_REQUEST_REVIEW)
      .setLabel('Solicitar rese√±as')
      .setEmoji('üìù')
      .setStyle(ButtonStyle.Secondary)
  );
}

export function buildTicketClaimedMessage({ mmTag, robloxUsername, vouches, avgStars }) {
  const stars = Number.isFinite(avgStars) ? avgStars : 0;
  const embed = applyDedosBrand(
    new EmbedBuilder()
      .setTitle('üü¶ TICKET RECLAMADO')
      .setDescription(
        [
          `Te atiende **${mmTag}**`,
          `**Roblox:** \`${robloxUsername}\``,
          `**Vouches:** ${vouches}`,
          `**‚≠ê Promedio:** ${stars > 0 ? stars.toFixed(2) : 'N/A'}`,
        ].join('\n')
      )
  );
  return { embeds: [embed], files: [createDedosAttachment()], components: [] };
}

export function buildRequestReviewsMessage({ mmTag, ownerMention, partnerMention }) {
  const lines = [
    '¬°Trade finalizado! Por favor, deja tu rese√±a para calificar la experiencia con el middleman.',
    'Haz clic en **Dejar rese√±a** y completa la informaci√≥n. Puedes dejar un comentario opcional.',
  ];
  const mentions = [ownerMention, partnerMention].filter(Boolean);
  if (mentions.length) {
    lines.unshift(mentions.join(' '));
  }
  const embed = applyDedosBrand(
    new EmbedBuilder()
      .setTitle('‚≠ê Comparte tu experiencia')
      .setDescription(lines.join('\n'))
      .setFooter({ text: 'Tu opini√≥n ayuda a la comunidad a mantenerse segura.' })
      .setAuthor({ name: `${mmTag} solicita tu rese√±a` })
  );
  return { embeds: [embed], files: [createDedosAttachment()], components: [buildReviewButtonRow()] };
}

export function buildReviewButtonRow() {
  return new ActionRowBuilder().addComponents(
    new ButtonBuilder()
      .setCustomId(INTERACTION_IDS.MIDDLEMAN_BUTTON_OPEN_REVIEW)
      .setLabel('Dejar rese√±a')
      .setEmoji('‚≠ê')
      .setStyle(ButtonStyle.Primary)
  );
}

export function buildReviewModal() {
  return new ModalBuilder()
    .setCustomId(INTERACTION_IDS.MIDDLEMAN_MODAL_REVIEW)
    .setTitle('Rese√±a del middleman')
    .addComponents(
      new ActionRowBuilder().addComponents(
        new TextInputBuilder()
          .setCustomId('stars')
          .setLabel('Calificaci√≥n (0-5)')
          .setPlaceholder('Ingresa un n√∫mero entero de 0 a 5')
          .setMinLength(1)
          .setMaxLength(2)
          .setStyle(TextInputStyle.Short)
          .setRequired(true)
      ),
      new ActionRowBuilder().addComponents(
        new TextInputBuilder()
          .setCustomId('review_text')
          .setLabel('Rese√±a (opcional)')
          .setPlaceholder('Cuenta c√≥mo fue tu experiencia con el middleman')
          .setMaxLength(400)
          .setStyle(TextInputStyle.Paragraph)
          .setRequired(false)
      )
    );
}

export function buildReviewPublishedEmbed({ reviewerTag, stars, text, mmTag }) {
  const embed = applyDedosBrand(
    new EmbedBuilder()
      .setTitle(`‚≠ê Nueva rese√±a para ${mmTag}`)
      .setDescription(text?.trim()?.length ? text.trim() : 'Sin comentarios adicionales.')
      .addFields(
        { name: 'Calificaci√≥n', value: `${'‚≠ê'.repeat(stars)}${'‚òÜ'.repeat(5 - stars)} (${stars}/5)`, inline: true },
        { name: 'Usuario', value: reviewerTag, inline: true }
      )
  );
  return { embeds: [embed], files: [createDedosAttachment()], components: [] };
}

export function buildTradeCompletedMessage({ middlemanTag, userOne, userTwo }) {
  const embed = applyDedosBrand(
    new EmbedBuilder()
      .setTitle('TRADE COMPLETADO')
      .setDescription(`**Middleman:** ${middlemanTag}`)
      .addFields(
        {
          name: userOne?.label ?? 'Usuario 1',
          value: `${userOne?.roblox ?? 'Roblox desconocido'}\n${userOne?.items ?? 'Sin registro'}`,
          inline: true,
        },
        {
          name: userTwo?.label ?? 'Usuario 2',
          value: `${userTwo?.roblox ?? 'Roblox desconocido'}\n${userTwo?.items ?? 'Sin registro'}`,
          inline: true,
        }
      )
  );
  return { embeds: [embed], files: [createDedosAttachment()], components: [] };
}

